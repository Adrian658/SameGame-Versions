import org.junit.*;
import static org.junit.Assert.*;
import java.lang.Thread;
import java.lang.String;
import javafx.application.Application;
import javafx.scene.control.Button;
import javafx.scene.shape.Circle;
import javafx.scene.paint.Color;
import javafx.scene.paint.Paint;
import javafx.scene.shape.Shape;
import java.lang.Math;

public class SameGameTester {
  
  @Test
  public void testCreateButtonVisuals() {
    
    String[] input = new String[3];
    input[0] = "6";
    input[1] = "6";
    input[2] = "3";
    //SameGame.main(input);
    //Button b = new Button();
    //assertEquals("", b.setGraphic(new Circle(10).setFill(Color.FIREBRICK)), createButtonVisuals;
    
  }
  
  /**
   * Tests the method findButtonIndices
   */
  @Test
  public void testFindButtonIndices() {
    
    SameGame game = new SameGame();
    game.main(new String[0]);
    
    /* test for 0, 1, many row index */
    Button[][] buttonList = new Button[3][1];
    buttonList[0][0] = new Button();
    buttonList[1][0] = new Button();
    buttonList[2][0] = new Button();
    game.setButtonList(buttonList);
    game.setRows(3);
    game.setColumns(1);
    game.findButtonIndices(buttonList[0][0]);
    assertEquals("Current row of specified button is 0", 0, game.getCurrentRow());
    assertEquals("Current column of button specified is 0", 0, game.getCurrentColumn());
    game.findButtonIndices(buttonList[1][0]);
    assertEquals("Current row of specified button is 1", 1, game.getCurrentRow());
    assertEquals("Current column of button specified is 0", 0, game.getCurrentColumn());
    game.findButtonIndices(buttonList[2][0]);
    assertEquals("Current row of specified button is 2", 2, game.getCurrentRow());
    assertEquals("Current column of button specified is 0", 0, game.getCurrentColumn());
    
    /* test for 0, 1, many column index */
    Button[][] buttonList1 = new Button[1][3];
    buttonList1[0][0] = new Button();
    buttonList1[0][1] = new Button();
    buttonList1[0][2] = new Button();
    game.setButtonList(buttonList1);
    game.setRows(1);
    game.setColumns(3);
    game.findButtonIndices(buttonList1[0][0]);
    assertEquals("Current row of specified button is 0", 0, game.getCurrentRow());
    assertEquals("Current column of button specified is 0", 0, game.getCurrentColumn());
    game.findButtonIndices(buttonList1[0][1]);
    assertEquals("Current row of specified button is 0", 0, game.getCurrentRow());
    assertEquals("Current column of button specified is 1", 1, game.getCurrentColumn());
    game.findButtonIndices(buttonList1[0][2]);
    assertEquals("Current row of specified button is 0", 0, game.getCurrentRow());
    assertEquals("Current column of button specified is 2", 2, game.getCurrentColumn());
  }
  
  @Test
  public void testResetVariables() {
    
    SameGame game = new SameGame();
    game.setButtonsAbove(5);
    game.setButtonsBelow(6);
    game.setButtonsRight(7);
    game.setButtonsLeft(8);
    game.resetVariables();
    assertEquals(0, game.getButtonsAbove());
    assertEquals(0, game.getButtonsBelow());
    assertEquals(0, game.getButtonsRight());
    assertEquals(0, game.getButtonsLeft());
  }
  
  /**
   * Tests the method buttonsAbove
   */
  @Test
  public void testButtonsAbove() {
    
    SameGame game = new SameGame();
    game.main(new String[0]);
    /* Creating custom button array and initializing bounds */
    Button[][] buttonList = new Button[4][1];
    buttonList[0][0] = new Button();
    buttonList[1][0] = new Button();
    buttonList[2][0] = new Button();
    buttonList[3][0] = new Button();
    buttonList[0][0].setGraphic(new Circle(10));
    buttonList[1][0].setGraphic(new Circle(10));
    buttonList[2][0].setGraphic(new Circle(10));
    buttonList[3][0].setGraphic(new Circle(10));
    ((Shape)(buttonList[0][0].getGraphic())).setFill(Color.FIREBRICK);
    ((Shape)(buttonList[1][0].getGraphic())).setFill(Color.FIREBRICK);
    ((Shape)(buttonList[2][0].getGraphic())).setFill(Color.FIREBRICK);
    ((Shape)(buttonList[3][0].getGraphic())).setFill(Color.DODGERBLUE);
    game.setButtonList(buttonList);
    game.setRows(4);
    game.setColumns(1);
    
    /* Test 0 buttons above specified button in array */
    game.setClickedColor(Color.DODGERBLUE);
    game.setCurrentRow(3);
    game.setCurrentColumn(0);
    game.buttonsAbove();
    assertEquals("There are 0 contiguous buttons above the button at the specified indices ", 0, game.getButtonsAbove());
    game.resetVariables();
    
    /* Test 1 button above specified button in array */
    game.setClickedColor(Color.FIREBRICK);
    game.setCurrentRow(1);
    game.setCurrentColumn(0);
    game.buttonsAbove();
    assertEquals("There is 1 contiguous buttons above the button at specified indices ", 1, game.getButtonsAbove());
    game.resetVariables();
    
    /* Test many buttons above specified button in array */
    game.setClickedColor(Color.FIREBRICK);
    game.setCurrentRow(2);
    game.setCurrentColumn(0);
    game.buttonsAbove();
    assertEquals("There are 2 contiguous buttons above the button at the specified indices ", 2, game.getButtonsAbove());
    game.resetVariables();
    
  }
  
  /**
   * Tests buttonsBelow method
   */
  @Test
  public void testButtonsBelow() {
    
    SameGame game = new SameGame();
    game.main(new String[0]);
    /* Creating custom button array */
    Button[][] buttonList = new Button[4][1];
    buttonList[0][0] = new Button();
    buttonList[1][0] = new Button();
    buttonList[2][0] = new Button();
    buttonList[3][0] = new Button();
    buttonList[0][0].setGraphic(new Circle(10));
    buttonList[1][0].setGraphic(new Circle(10));
    buttonList[2][0].setGraphic(new Circle(10));
    buttonList[3][0].setGraphic(new Circle(10));
    ((Shape)(buttonList[0][0].getGraphic())).setFill(Color.FIREBRICK);
    ((Shape)(buttonList[1][0].getGraphic())).setFill(Color.FIREBRICK);
    ((Shape)(buttonList[2][0].getGraphic())).setFill(Color.FIREBRICK);
    ((Shape)(buttonList[3][0].getGraphic())).setFill(Color.DODGERBLUE);
    game.setButtonList(buttonList);
    game.setRows(4);
    game.setColumns(1);
    
    /* Test 0 buttons below specified button in array */
    game.setClickedColor(Color.FIREBRICK);
    game.setCurrentRow(2);
    game.setCurrentColumn(0);
    game.buttonsBelow();
    assertEquals("There are 0 contiguous buttons below the button at the specified indices ", 0, game.getButtonsBelow());
    game.resetVariables();
    
    /* Test 1 button below specified button in array */
    game.setClickedColor(Color.FIREBRICK);
    game.setCurrentRow(1);
    game.setCurrentColumn(0);
    game.buttonsBelow();
    assertEquals("There is 1 contiguous button below the button at specified indices ", 1, game.getButtonsBelow());
    game.resetVariables();
    
    /* Test many buttons below specified button in array */
    game.setClickedColor(Color.FIREBRICK);
    game.setCurrentRow(0);
    game.setCurrentColumn(0);
    game.buttonsBelow();
    assertEquals("There are 2 contiguous buttons below the button at the specified indices ", 2, game.getButtonsBelow());
    game.resetVariables();
    
  }
  
  /**
   * Tests buttonsRight method
   */
  @Test
  public void testButtonsRight() {
    
    SameGame game = new SameGame();
    game.main(new String[0]);
    /* Creating custom button array */
    Button[][] buttonList = new Button[1][4];
    buttonList[0][0] = new Button();
    buttonList[0][1] = new Button();
    buttonList[0][2] = new Button();
    buttonList[0][3] = new Button();
    buttonList[0][0].setGraphic(new Circle(10));
    buttonList[0][1].setGraphic(new Circle(10));
    buttonList[0][2].setGraphic(new Circle(10));
    buttonList[0][3].setGraphic(new Circle(10));
    ((Shape)(buttonList[0][0].getGraphic())).setFill(Color.DODGERBLUE);
    ((Shape)(buttonList[0][1].getGraphic())).setFill(Color.FIREBRICK);
    ((Shape)(buttonList[0][2].getGraphic())).setFill(Color.FIREBRICK);
    ((Shape)(buttonList[0][3].getGraphic())).setFill(Color.FIREBRICK);
    game.setButtonList(buttonList);
    game.setRows(1);
    game.setColumns(4);
    
    /* Test 0 buttons right of specified button in array */
    game.setClickedColor(Color.DODGERBLUE);
    game.setCurrentRow(0);
    game.setCurrentColumn(0);
    game.buttonsRight();
    assertEquals("There are 0 contiguous buttons right of the button at the specified indices ", 0, game.getButtonsRight());
    game.resetVariables();
    
    /* Test 1 button right of specified button in array */
    game.setClickedColor(Color.FIREBRICK);
    game.setCurrentRow(0);
    game.setCurrentColumn(2);
    game.buttonsRight();
    assertEquals("There is 1 contiguous button right of the button at specified indices ", 1, game.getButtonsRight());
    game.resetVariables();
    
    /* Test many buttons right of specified button in array */
    game.setClickedColor(Color.FIREBRICK);
    game.setCurrentRow(0);
    game.setCurrentColumn(1);
    game.buttonsRight();
    assertEquals("There are 2 contiguous buttons right of the button at the specified indices ", 2, game.getButtonsRight());
    game.resetVariables();
    
  }
  
  /** 
   * Tests buttonsLeft method
   */
  @Test
  public void testButtonsLeft() {
    
    SameGame game = new SameGame();
    game.main(new String[0]);
    /* Creating custom button array */
    Button[][] buttonList = new Button[1][4];
    buttonList[0][0] = new Button();
    buttonList[0][1] = new Button();
    buttonList[0][2] = new Button();
    buttonList[0][3] = new Button();
    buttonList[0][0].setGraphic(new Circle(10));
    buttonList[0][1].setGraphic(new Circle(10));
    buttonList[0][2].setGraphic(new Circle(10));
    buttonList[0][3].setGraphic(new Circle(10));
    ((Shape)(buttonList[0][0].getGraphic())).setFill(Color.DODGERBLUE);
    ((Shape)(buttonList[0][1].getGraphic())).setFill(Color.FIREBRICK);
    ((Shape)(buttonList[0][2].getGraphic())).setFill(Color.FIREBRICK);
    ((Shape)(buttonList[0][3].getGraphic())).setFill(Color.FIREBRICK);
    game.setButtonList(buttonList);
    game.setRows(1);
    game.setColumns(4);
    
    /* Test 0 buttons left of specified button in array */
    game.setClickedColor(Color.FIREBRICK);
    game.setCurrentRow(0);
    game.setCurrentColumn(1);
    game.buttonsLeft();
    assertEquals("There are 0 contiguous buttons left of the button at the specified indices ", 0, game.getButtonsLeft());
    game.resetVariables();
    
    /* Test 1 button left of specified button in array */
    game.setClickedColor(Color.FIREBRICK);
    game.setCurrentRow(0);
    game.setCurrentColumn(2);
    game.buttonsLeft();
    assertEquals("There is 1 contiguous button left of the button at specified indices ", 1, game.getButtonsLeft());
    game.resetVariables();
    
    /* Test many buttons left of specified button in array */
    game.setClickedColor(Color.FIREBRICK);
    game.setCurrentRow(0);
    game.setCurrentColumn(3);
    game.buttonsLeft();
    assertEquals("There are 2 contiguous buttons left of the button at the specified indices ", 2, game.getButtonsLeft());
    game.resetVariables();
    
  }
  
  /**
   * Tests the method countButtons
   */
  public void testCountButtons() {
    /* Since we already tested the methods called in this method, 
     * and this method does not perform any other actions other than calling these methods,
     * we only need to test that the methods were called with correct values being stored */
    SameGame game = new SameGame();
    game.main(new String[0]);
    /* Creating custom button array */
    Button[][] buttonList = new Button[1][1];
    buttonList[0][0] = new Button();
    buttonList[0][0].setGraphic(new Circle(10));
    ((Shape)(buttonList[0][0].getGraphic())).setFill(Color.DODGERBLUE);
    game.setButtonList(buttonList);
    game.setRows(1);
    game.setColumns(1);
    /* Specifying values of the button to analyze */
    game.setClickedColor(Color.DODGERBLUE);
    game.setCurrentRow(0);
    game.setCurrentColumn(0);
    game.countButtons();
    /* Checking if each method set their respective fields to 0 */
    assertEquals("There are 0 contiguous buttons left of the button at the specified indices ", 0, game.getButtonsLeft());
    assertEquals("There are 0 contiguous buttons right of the button at the specified indices ", 0, game.getButtonsRight());
    assertEquals("There are 0 contiguous buttons above the button at the specified indices ", 0, game.getButtonsAbove());
    assertEquals("There are 0 contiguous buttons below the button at the specified indices ", 0, game.getButtonsBelow());
    game.resetVariables();
  }
  
  /**
   * Tests the method dropSingleColumn
   */
  @Test
  public void testDropSingleColumn() {
    
    SameGame game = new SameGame();
    game.main(new String[0]);
    /* Creating custom button array and specifies dimensions */
    Button[][] buttonList = new Button[3][1];
    buttonList[0][0] = new Button();
    buttonList[1][0] = new Button();
    buttonList[2][0] = new Button();
    buttonList[0][0].setGraphic(new Circle(10));
    buttonList[1][0].setGraphic(new Circle(10));
    buttonList[2][0].setGraphic(new Circle(10));
    ((Shape)(buttonList[0][0].getGraphic())).setFill(Color.FIREBRICK);
    ((Shape)(buttonList[1][0].getGraphic())).setFill(Color.DODGERBLUE);
    ((Shape)(buttonList[2][0].getGraphic())).setFill(Color.YELLOW);
    game.setButtonList(buttonList);
    game.setRows(3);
    game.setColumns(1);
    
    /* Test for dropping 0 buttons because the specified button is at the top */
    game.setCurrentRow(0);
    game.setCurrentColumn(0);
    game.dropSingleColumn(0, 0, 0);
    assertArrayEquals("The specified button is at the top of the array grid, so no buttons are dropped, and does not enter if statement because index of" + 
                 "button to check is not valid", buttonList, game.getButtonList());
    game.resetVariables();
    
    /* Test for dropping 1 button because the specified button is second from the top */
    game.setCurrentRow(1);
    game.dropSingleColumn(1, 0, 0);
    assertEquals("The specified button is second from the top of the array grid, so one button is dropped, and does enter if statement because" + 
                 "index of button to check, or button above current button, is at the top. Top button should be gray", Color.LIGHTGRAY, 
                      (Color)(((Shape)(game.getButtonList()[0][0].getGraphic())).getFill()));
    assertEquals("Button at index specified should recieve color of button above it, which is FIREBRICK", Color.FIREBRICK, 
                      (Color)(((Shape)(game.getButtonList()[1][0].getGraphic())).getFill()));
    
    /* Test for dropping many buttons because the specified button is at the bottom of the grid, so drops all buttons above it */
    game.setCurrentRow(2);
    game.setButtonList(buttonList);
  }
  
  /** Tests the updateScore method */
  @Test
  public void testUpdateScore() {
    SameGame game = new SameGame();
    game.setButtonsBelow(1);
    assertEquals("Test for totalButtons = 1, returns score of 1", 1, game.updateScore());
    game.setButtonsRight(2);
    assertEquals("Test for totalButtons != 1, returns score of 11", 11, game.updateScore());
    game.setButtonsLeft(7);
    assertEquals("Test for totalButtons > 5, changes totalButtons to 6 and returns score of 212", 212, game.updateScore()); 
  }
  
  /** Tests the getRows and setRows methods */
  @Test
  public void testGetRowsSetRows() {
    SameGame game = new SameGame();
    assertEquals("Rows is initialized as 12", 12, game.getRows());
    game.setRows(7);
    assertEquals("Rows has been changed to 7 by setRows", 7, game.getRows());
  }
  
  /** Tests the getColumns and setColumns methods */
  @Test
  public void testGetColumnsSetColumns() {
    SameGame game = new SameGame();
    assertEquals("Columns is initialized as 12", 12, game.getColumns());
    game.setColumns(7);
    assertEquals("Columns has been changed to 7 by setColumns", 7, game.getColumns());
  }
  
  /** Tests the getNumberColors and setNumberColors methods */
  @Test
  public void testGetNumberColorsSetNumberColors() {
    SameGame game = new SameGame();
    assertEquals("Number of colors is initialized as 3", 3, game.getNumberColors());
    game.setNumberColors(5);
    assertEquals("Number of colors has been changed to 5 by setNumberColors", 5, game.getNumberColors());
  }
  
  @Test
  public void testGetGridPane() {
    
  }
  
  @Test
  public void testGetButtonList() {
    
  }
  
  /** Tests the getCurrentRow and setCurrentRow methods */
  @Test
  public void testGetCurrentRowSetCurrentRow() {
    SameGame game = new SameGame();
    game.setCurrentRow(7);
    assertEquals("Current row has been changed to 7 by setCurrentRow", 7, game.getCurrentRow());
  }
  
  /** Tests the getCurrentColumn and setCurrentColumn methods */
  @Test
  public void testGetCurrentColumnSetCurrentColumn() {
    SameGame game = new SameGame();
    game.setCurrentColumn(3);
    assertEquals("Current column has been changed to 3 by setCurrentColumn", 3, game.getCurrentColumn());
  }
  
  /** Tests the getButtonsAbove and setButtonsAbove methods */
  @Test
  public void testGetButtonsAboveSetButtonsAbove() {
    SameGame game = new SameGame();
    game.setButtonsAbove(6);
    assertEquals("Buttons above has been changed to 6 by setButtonsAbove", 6, game.getButtonsAbove());
  }
  
  /** Tests the getButtonsBelow and setButtonsBelow methods */
  @Test
  public void testGetButtonsBelowSetButtonsBelow() {
    SameGame game = new SameGame();
    game.setButtonsBelow(5);
    assertEquals("Buttons below has been changed to 6 by setButtonsBelow", 5, game.getButtonsBelow());
  }
  
  /** Tests the getButtonsLeft and setButtonsLeft methods */
  @Test
  public void testGetButtonsLeftSetButtonsLeft() {
    SameGame game = new SameGame();
    game.setButtonsLeft(9);
    assertEquals("Buttons left has been changed to 6 by setButtonsLeft", 9, game.getButtonsLeft());
  }
  
  /** Tests the getButtonsRight and setButtonsRight methods */
  @Test
  public void testGetButtonsRightSetButtonsRight() {
    SameGame game = new SameGame();
    game.setButtonsRight(9);
    assertEquals("Buttons right has been changed to 6 by setButtonsRight", 9, game.getButtonsRight());
  }
  
  /** Tests the getClickedColor and setClickedColor methods */
  @Test
  public void testGetClickedColorSetClickedColor() {
    SameGame game = new SameGame();
    game.setClickedColor(Color.BLUE);
    assertEquals("Button color was changed to blue so returns blue", Color.BLUE, game.getClickedColor());
  }
}